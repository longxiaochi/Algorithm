package com.longchi;

public class LinkedList<E> extends AbstractList<E>{
	// 链表大小
	private int size;
	// 链表的首节点
	private Node<E> first;
	
	// 内部类，节点结构
	private static class Node<E> {
		E element;
		Node<E> next;
		
		public Node(E element, Node<E> next) {
			this.element = element;
			this.next = next;
		}
	}

	/**
	 * 获取index位置的元素
	 * @param index
	 * @return
	 */
	@Override
	public E get(int index) {
		return nodeOf(index).element;
	}

	/**
	 * 设置index位置的元素
	 * @param index
	 * @param element
	 * @return 原来的元素ֵ
	 */
	@Override
	public E set(int index, E element) {
		
	}

	/**
	 * 在index位置插入一个元素
	 * @param index
	 * @param element
	 */
	@Override
	public void add(int index, E element) {
		
	}

	/**
	 * 删除index位置的元素
	 * @param index
	 * @return
	 */
	@Override
	public E remove(int index) {
		
	}

	/**
	 * 查看元素的索引
	 * @param element
	 * @return
	 */
	@Override
	public int indexOf(E element) {
		
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub
		
	}
	
	public Node nodeOf(int index) {
		rangeCheck(index);
		Node node = first; 
		for (int i = 0; i < index; i++) {
			node = node.next;
		}
		return node;
	}
}
